{"version":3,"sources":["logo.svg","helpers/webSocketHandlers.js","components/ChatInput.jsx","components/ChatDisplay.jsx","App.js","reportWebVitals.js","index.js"],"names":["socket","WebSocket","useStyles","makeStyles","theme","root","margin","spacing","form","width","field","backgroundColor","ChatInput","classes","useState","mssg","setMssg","chatHandler","e","preventDefault","send","sendChatMessage","className","noValidate","autoComplete","onSubmit","TextField","id","label","variant","value","onChange","target","Button","color","onClick","ChatDisplay","useEffect","addEventListener","event","console","log","data","el","document","createElement","innerText","querySelector","appendChild","App","_","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sLAAe,G,MAAA,IAA0B,kCCAnCA,G,MAAS,IAAIC,UAAU,sC,wCCMvBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,KAG1BC,KAAM,CACJ,QAAS,CACPF,OAAQF,EAAMG,QAAQ,GACtBE,MAAO,SAGXC,MAAO,CACLC,gBAAiB,YA4CRC,MAvCf,WACE,IAAMC,EAAUX,IAChB,EAAwBY,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAc,SAACC,GACnBA,EAAEC,iBDfkB,SAACJ,GACrBf,EAAOoB,KAAKL,GCeZM,CAAgBN,GAChBC,EAAQ,KAOV,OACE,gCACE,sBAAMM,UAAWT,EAAQL,KAAMe,YAAU,EAACC,aAAa,MAAMC,SAAUR,EAAvE,SACE,cAACS,EAAA,EAAD,CACEJ,UAAWT,EAAQH,MACnBiB,GAAG,eACHC,MAAM,qBACNC,QAAQ,SACRC,MAAOf,EACPgB,SAbe,SAACb,GACtBF,EAAQE,EAAEc,OAAOF,YAef,qBAAKR,UAAWT,EAAQR,KAAxB,SACE,cAAC4B,EAAA,EAAD,CACEJ,QAAQ,YACRK,MAAM,UACNC,QAASlB,EAHX,2BC7BOmB,MAnBf,WAWE,OATAC,qBAAU,WACRrC,EAAOsC,iBAAiB,WAAW,SAAUC,GAC3CC,QAAQC,IAAI,4BAA6BF,EAAMG,MAC/C,IAAIC,EAAKC,SAASC,cAAc,MAChCF,EAAGG,UAAYP,EAAMG,KACrBE,SAASG,cAAc,MAAMC,YAAYL,QAE1C,IAGD,8BACE,0BCQSM,MAjBf,WAME,OAJAZ,qBAAU,SAAAa,GHLRlD,EAAOsC,iBAAiB,QAAQ,SAAUC,GACtCvC,EAAOoB,KAAK,sBGMf,IAGD,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAK6B,IAAKC,EAAM9B,UAAU,WAAW+B,IAAI,SACzC,cAAC,EAAD,IACA,cAAC,EAAD,UCNOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrB,SAASsB,eAAe,SAM1BZ,M","file":"static/js/main.08af6c5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const socket = new WebSocket('ws://memochatty.herokuapp.com//ws');\n\nconst establishNewConnection = () => {\n    // Connection opened\n    socket.addEventListener('open', function (event) {\n        socket.send('Hello Server!');\n    });\n}\n\n// Listen for messages\nconst chatListener = () => {\n    \n}\n\nconst sendChatMessage = (mssg) => {\n    socket.send(mssg);\n}\n\nexport {\n    socket,\n    establishNewConnection,\n    chatListener,\n    sendChatMessage\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { sendChatMessage } from '../helpers/webSocketHandlers';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    form: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    field: {\n      backgroundColor: '#FFF'\n    }\n  }));\n\n  \nfunction ChatInput() {\n  const classes = useStyles();\n  const [mssg, setMssg] = useState('');\n  \n  const chatHandler = (e) => {\n    e.preventDefault();\n    sendChatMessage(mssg);\n    setMssg('');\n  }\n\n  const handleOnChange = (e) => {\n    setMssg(e.target.value);\n  }\n\n  return (\n    <div>\n      <form className={classes.form} noValidate autoComplete=\"off\" onSubmit={chatHandler}>\n        <TextField \n          className={classes.field} \n          id=\"filled-basic\" \n          label=\"mssg goes here foo\" \n          variant=\"filled\"\n          value={mssg}\n          onChange={handleOnChange}\n        />\n      </form>\n      <div className={classes.root}>\n        <Button \n          variant=\"contained\" \n          color=\"primary\" \n          onClick={chatHandler}\n        >\n          Primary\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatInput;","import React, { useEffect, useState } from 'react';\nimport { socket } from '../helpers/webSocketHandlers';\n  \nfunction ChatDisplay() {\n\n  useEffect(() => {\n    socket.addEventListener('message', function (event) {\n      console.log('Message from server here:', event.data);\n      let el = document.createElement('li');\n      el.innerText = event.data;\n      document.querySelector('ul').appendChild(el);\n    });\n  }, []);\n\n  return (\n    <div>\n      <ul>\n      </ul>\n    </div>\n  );\n}\n\nexport default ChatDisplay;","import { useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { establishNewConnection } from './helpers/webSocketHandlers';\nimport ChatInput from './components/ChatInput';\nimport ChatDisplay from './components/ChatDisplay';\n\nfunction App() {\n\n  useEffect(_ => {\n    establishNewConnection();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <ChatDisplay />\n        <ChatInput/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@fontsource/roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}